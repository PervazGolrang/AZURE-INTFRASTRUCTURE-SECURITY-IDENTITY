// ARM json: Step 6 - Zero Trust Web App with WAF and Azure AD Authentication
// Based on step06_zero_trust_webapp.md

{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.36.1.42791",
      "templateHash": "18302695484126494287"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "prefix": {
      "type": "string",
      "defaultValue": "lab01"
    }
  },
  "variables": {
    "planName": "plan-core-neu01",
    "webAppName": "app-secure-neu01",
    "vnetName": "vnet-core-neu01",
    "subnetName": "subnet-jumphost01",
    "peName": "pe-app-secure",
    "fdName": "afd-secure-core",
    "wafPolicyName": "wafpolicysecure01",
    "logAnalyticsName": "[format('{0}-log-neu', parameters('prefix'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2022-03-01",
      "name": "[variables('planName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "P1v2",
        "tier": "PremiumV2"
      },
      "properties": {
        "reserved": true
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2022-03-01",
      "name": "[variables('webAppName')]",
      "location": "[parameters('location')]",
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('planName'))]",
        "httpsOnly": true,
        "siteConfig": {
          "linuxFxVersion": "DOTNET|8",
          "localMySqlEnabled": false,
          "http20Enabled": true
        },
        "publicNetworkAccess": "Disabled"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('planName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateEndpoints",
      "apiVersion": "2021-05-01",
      "name": "[variables('peName')]",
      "location": "[parameters('location')]",
      "properties": {
        "subnet": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnetName'))]"
        },
        "privateLinkServiceConnections": [
          {
            "name": "pe-link-app-secure",
            "properties": {
              "privateLinkServiceId": "[resourceId('Microsoft.Web/sites', variables('webAppName'))]",
              "groupIds": [
                "sites"
              ]
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('webAppName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateDnsZones",
      "apiVersion": "2020-06-01",
      "name": "privatelink.azurewebsites.net",
      "location": "global"
    },
    {
      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
      "apiVersion": "2021-05-01",
      "name": "[format('{0}/{1}', variables('peName'), 'default')]",
      "properties": {
        "privateDnsZoneConfigs": [
          {
            "name": "privatelink-azurewebsites-net",
            "properties": {
              "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.azurewebsites.net')]"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.azurewebsites.net')]",
        "[resourceId('Microsoft.Network/privateEndpoints', variables('peName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', 'privatelink.azurewebsites.net', 'vnet-link')]",
      "location": "global",
      "properties": {
        "registrationEnabled": false,
        "virtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.azurewebsites.net')]"
      ]
    },
    {
      "type": "Microsoft.Network/FrontDoorWebApplicationFirewallPolicies",
      "apiVersion": "2022-05-01",
      "name": "[variables('wafPolicyName')]",
      "location": "global",
      "properties": {
        "policySettings": {
          "enabledState": "Enabled",
          "mode": "Prevention"
        },
        "customRules": {
          "rules": [
            {
              "name": "blockbots",
              "priority": 100,
              "ruleType": "MatchRule",
              "matchConditions": [
                {
                  "matchVariable": "RequestHeader",
                  "selector": "User-Agent",
                  "operator": "Contains",
                  "matchValue": [
                    "bot"
                  ],
                  "transforms": [
                    "Lowercase"
                  ],
                  "negateCondition": false
                }
              ],
              "action": "Block"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Cdn/profiles",
      "apiVersion": "2023-05-01",
      "name": "[variables('fdName')]",
      "location": "global",
      "sku": {
        "name": "Premium_AzureFrontDoor"
      }
    },
    {
      "type": "Microsoft.Cdn/profiles/afdEndpoints",
      "apiVersion": "2023-05-01",
      "name": "[format('{0}/{1}', variables('fdName'), format('endpoint-{0}', variables('webAppName')))]",
      "location": "global",
      "properties": {
        "enabledState": "Enabled"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Cdn/profiles', variables('fdName'))]"
      ]
    },
    {
      "type": "Microsoft.Cdn/profiles/originGroups",
      "apiVersion": "2023-05-01",
      "name": "[format('{0}/{1}', variables('fdName'), 'default-origin-group')]",
      "properties": {
        "loadBalancingSettings": {
          "sampleSize": 4,
          "successfulSamplesRequired": 3,
          "additionalLatencyInMilliseconds": 50
        },
        "healthProbeSettings": {
          "probePath": "/",
          "probeRequestType": "HEAD",
          "probeProtocol": "Https",
          "probeIntervalInSeconds": 100
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Cdn/profiles', variables('fdName'))]"
      ]
    },
    {
      "type": "Microsoft.Cdn/profiles/originGroups/origins",
      "apiVersion": "2023-05-01",
      "name": "[format('{0}/{1}/{2}', variables('fdName'), 'default-origin-group', 'webapp-origin')]",
      "properties": {
        "hostName": "[reference(resourceId('Microsoft.Web/sites', variables('webAppName')), '2022-03-01').defaultHostName]",
        "httpPort": 80,
        "httpsPort": 443,
        "originHostHeader": "[reference(resourceId('Microsoft.Web/sites', variables('webAppName')), '2022-03-01').defaultHostName]",
        "priority": 1,
        "weight": 1000,
        "enabledState": "Enabled",
        "enforceCertificateNameCheck": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.Cdn/profiles/originGroups', variables('fdName'), 'default-origin-group')]",
        "[resourceId('Microsoft.Web/sites', variables('webAppName'))]"
      ]
    },
    {
      "type": "Microsoft.Cdn/profiles/afdEndpoints/routes",
      "apiVersion": "2023-05-01",
      "name": "[format('{0}/{1}/{2}', variables('fdName'), format('endpoint-{0}', variables('webAppName')), 'default-route')]",
      "properties": {
        "customDomains": [],
        "originGroup": {
          "id": "[resourceId('Microsoft.Cdn/profiles/originGroups', variables('fdName'), 'default-origin-group')]"
        },
        "ruleSets": [],
        "supportedProtocols": [
          "Http",
          "Https"
        ],
        "patternsToMatch": [
          "/*"
        ],
        "forwardingProtocol": "HttpsOnly",
        "linkToDefaultDomain": "Enabled",
        "httpsRedirect": "Enabled"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Cdn/profiles/afdEndpoints', variables('fdName'), format('endpoint-{0}', variables('webAppName')))]",
        "[resourceId('Microsoft.Cdn/profiles/originGroups/origins', variables('fdName'), 'default-origin-group', 'webapp-origin')]",
        "[resourceId('Microsoft.Cdn/profiles/originGroups', variables('fdName'), 'default-origin-group')]"
      ]
    },
    {
      "type": "Microsoft.Cdn/profiles/securityPolicies",
      "apiVersion": "2023-05-01",
      "name": "[format('{0}/{1}', variables('fdName'), 'security-policy')]",
      "properties": {
        "parameters": {
          "type": "WebApplicationFirewall",
          "wafPolicy": {
            "id": "[resourceId('Microsoft.Network/FrontDoorWebApplicationFirewallPolicies', variables('wafPolicyName'))]"
          },
          "associations": [
            {
              "domains": [
                {
                  "id": "[resourceId('Microsoft.Cdn/profiles/afdEndpoints', variables('fdName'), format('endpoint-{0}', variables('webAppName')))]"
                }
              ],
              "patternsToMatch": [
                "/*"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Cdn/profiles/afdEndpoints', variables('fdName'), format('endpoint-{0}', variables('webAppName')))]",
        "[resourceId('Microsoft.Cdn/profiles', variables('fdName'))]",
        "[resourceId('Microsoft.Network/FrontDoorWebApplicationFirewallPolicies', variables('wafPolicyName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2022-03-01",
      "name": "[format('{0}/{1}', variables('webAppName'), 'authsettingsV2')]",
      "properties": {
        "globalValidation": {
          "requireAuthentication": true,
          "unauthenticatedClientAction": "RedirectToLoginPage"
        },
        "identityProviders": {
          "azureActiveDirectory": {
            "enabled": true,
            "registration": {
              "openIdIssuer": "[format('https://sts.windows.net/{0}/', subscription().tenantId)]",
              "clientId": "YOUR_CLIENT_ID"
            },
            "login": {
              "disableWWWAuthenticate": false
            }
          }
        },
        "login": {
          "routes": {
            "logoutEndpoint": "/.auth/logout"
          },
          "tokenStore": {
            "enabled": true
          }
        },
        "httpSettings": {
          "requireHttps": true,
          "routes": {
            "apiPrefix": "/.auth"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('webAppName'))]"
      ]
    },
    {
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.Web/sites/{0}', variables('webAppName'))]",
      "name": "webapp-diagnostics",
      "properties": {
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]",
        "logs": [
          {
            "category": "AppServiceHTTPLogs",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": 30
            }
          },
          {
            "category": "AppServiceConsoleLogs",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": 30
            }
          }
        ],
        "metrics": [
          {
            "category": "AllMetrics",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": 30
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('webAppName'))]"
      ]
    }
  ],
  "outputs": {
    "frontDoorEndpointUrl": {
      "type": "string",
      "value": "[format('https://{0}', reference(resourceId('Microsoft.Cdn/profiles/afdEndpoints', variables('fdName'), format('endpoint-{0}', variables('webAppName'))), '2023-05-01').hostName)]"
    },
    "webAppName": {
      "type": "string",
      "value": "[variables('webAppName')]"
    },
    "privateEndpointName": {
      "type": "string",
      "value": "[variables('peName')]"
    }
  }
}